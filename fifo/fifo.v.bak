module fifo

#(
    parameter DATA_WIDTH = 8,
    parameter PTR_WIDTH = 8
)
(
    input  clock,
    input  rst_n,
    input  push,             // enqueue
    input  pop,              // dequeue

    input  [DATA_WIDTH-1:0] write_data,
    output reg [DATA_WIDTH-1:0] read_data
);

    reg [DATA_WIDTH-1:0] fifo_mem [0:(1<<PTR_WIDTH)-1];
    reg [PTR_WIDTH-1:0] read_ptr;
    reg [PTR_WIDTH-1:0] write_ptr;
    reg [PTR_WIDTH:0]   fifo_count; // to track how many items are in the FIFO

    always @(posedge clock or negedge rst_n) begin
        if (!rst_n) begin
            read_ptr   <= 0;
            write_ptr  <= 0;
            fifo_count <= 0;
            read_data  <= 0;
        end
        else begin
            // write (enqueue)
            if (push && fifo_count < (1<<PTR_WIDTH)) begin
                fifo_mem[write_ptr] <= write_data;
                write_ptr <= write_ptr + 1;
                fifo_count <= fifo_count + 1;
            end

            // read (dequeue)
            if (pop && fifo_count > 0) begin
                read_data <= fifo_mem[read_ptr];
                read_ptr <= read_ptr + 1;
                fifo_count <= fifo_count - 1;
            end
        end
    end

endmodule



