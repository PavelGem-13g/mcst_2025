module fifo_tb;

    // Параметры FIFO
    localparam DATA_W = 10;
    localparam FIFO_SIZE = 6;

    // Тестовые сигналы
    reg clock;
    reg rst_n;
    reg push;
    reg pop;
    reg [DATA_W-1:0] data_in;
    wire [DATA_W-1:0] read_data;
    wire full;

    // Instantiate FIFO
    fifo #(
        .DATA_W(DATA_W),
        .FIFO_SIZE(FIFO_SIZE)
    ) dut (
        .clock(clock),
        .rst_n(rst_n),
        .push(push),
        .pop(pop),
        .full(full),
        .data_in(data_in),
        .read_data(read_data)
    );

    // Мониторим все основные сигналы
    initial begin
        $monitor("t=%0t | rst_n=%b | push=%b | pop=%b | data_in=%d | read_data=%d | full=%b",
                  $time, rst_n, push, pop, data_in, read_data, full);
    end

    // Генератор тактового сигнала
    always #5 clock = ~clock;

    // Тестовый сценарий
    initial begin
        // Инициализация
        clock = 0; rst_n = 0; push = 0; pop = 0; data_in = 0;
        #10;
        rst_n = 1;
        #10;

        // Пушим 3 значения
        push = 1; data_in = 10; #10;
        push = 1; data_in = 20; #10;
        push = 1; data_in = 30; #10;
        push = 0;

        // Ожидаемый вывод:
        // read_data будет обновляться только при pop.
        // После этого можно делать pop.

        // Поп 1 раз: ожидаем read_data = 10
        pop = 1; #10;
        pop = 0; #5; // (чтобы не "пропустить" вывод)

        // Поп 1 раз: ожидаем read_data = 20
        pop = 1; #10;
        pop = 0; #5;

        // Поп 1 раз: ожидаем read_data = 30
        pop = 1; #10;
        pop = 0; #5;

        // Поп когда FIFO пуст: read_data не меняется, ожидаем прежнее значение
        pop = 1; #10;
        pop = 0; #5;

        // Тестируем full: заполняем FIFO полностью
        integer i;
        for (i = 0; i < FIFO_SIZE-1; i = i+1) begin
            push = 1; data_in = 100+i*10; #10;
        end
        push = 0;
        // Здесь full должен быть 1

        // Поп 1 раз, full должен сброситься
        pop = 1; #10;
        pop = 0; #5;

        // Завершение теста
        #20;
        $finish;
    end

endmodule